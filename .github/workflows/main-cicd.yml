# This is a basic workflow to help you get started with Actions

name: Axis-CICD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    ###

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    #- uses: actions/checkout@master
    #- name: Run ShellCheck
    #  uses: ludeeus/action-shellcheck@master
    #  env:
    #    SHELLCHECK_OPTS: -e SC2153 -e SC2148 -e SC2086
    
    # Add qemu cross compiler to compile pose-estimator-with-flask and web-server example
    - name: qemu cross compiler
      run: |
         docker run --rm --privileged multiarch/qemu-user-static --credential yes --persistent yes

    # Run build script for hello-world app
    - name: Build hello-world application
      run: |
        cd ./hello-world
        docker build -t axisecp/hello-world:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/hello-world:aarch64 --build-arg ARCH=aarch64 .

    # Run build script for hello-world-crosscompiled app
    - name: Build hello-world-crosscompiled application
      run: |
        cd ./hello-world-crosscompiled
        docker build -t axisecp/hello-world-crosscompiled:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/hello-world-crosscompiled:aarch64 --build-arg ARCH=aarch64 .

    # Run build script for minimal-ml-inference app
    - name: Build minimal-ml-inference application
      run: |
        cd ./minimal-ml-inference
        docker build -t axisecp/minimal-ml-inference:armv7h7 --build-arg ARCH=armv7hf  . 
        docker build -t axisecp/minimal-ml-inference:aarch64 --build-arg ARCH=aarch64  . 

    # Run build script for object-detector-cpp app
    - name: Build object-detector-cpp application
      run: |
        cd ./object-detector-cpp
        docker build -t axisecp/acap-object-detector-cpp:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/acap-object-detector-cpp:aarch64 --build-arg ARCH=aarch64 .

    # Run build object-detector-python
    - name: Build object-detector-python application
      run: |
        cd ./object-detector-python
        docker build -t axisecp/object-detector-python:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/object-detector-python:aarch64 --build-arg ARCH=aarch64 .

    # Run build script for opencv-image-capture-cpp app
    - name: Build opencv-image-capture-cpp
      run: |
        cd ./opencv-image-capture-cpp
        docker build -t axisecp/acap-opencv-image-capture-cpp:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/acap-opencv-image-capture-cpp:aarch64 --build-arg ARCH=aarch64 .

    # Run build script for opencv-qr-decoder-python app
    - name: Build opencv-qr-decoder-python application
      run: |
        cd ./opencv-qr-decoder-python
        docker build -t axisecp/acap-opencv-qr-decoder-python:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/acap-opencv-qr-decoder-python:aarch64 --build-arg ARCH=aarch64 .

    # Run build script for parameter-api
    - name: Build parameter-api application
      run: |
        cd ./parameter-api
        docker build -t axisecp/parameter-api:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/parameter-api:aarch64 --build-arg ARCH=aarch64 .

    # Run build script for pose-estimator-with-flask, quemu is needed to crossbuild flask
    - name: Build pose-estimator-with-flask application
      run: |
        cd ./pose-estimator-with-flask
        docker build -t axisecp/pose-estimator-with-flask:armv7h7 --build-arg ARCH=armv7hf  .
        docker build -t axisecp/pose-estimator-with-flask:aarch64 --build-arg ARCH=aarch64  .
        docker build -f Dockerfile.model -t axisecp/acap-dl-models:armv7h7 --build-arg ARCH=armv7hf .
        docker build -f Dockerfile.model -t axisecp/acap-dl-models:aarch64 --build-arg ARCH=aarch64 .

    # Run build web-server
    - name: Build web-server application
      run: |
        cd ./web-server
        docker build -t axisecp/web-server:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/web-server:aarch64 --build-arg ARCH=aarch64 .

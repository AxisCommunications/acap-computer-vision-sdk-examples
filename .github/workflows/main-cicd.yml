name: Axis-CICD

on:
  push:
    paths:
      - '**'
      - '!.github/workflows/example-checks.yml'
      - '!README.md'
      - '!LICENSE'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    # Add qemu cross compiler to compile pose-estimator-with-flask and web-server example
    - name: qemu cross compiler
      run: |
         docker run --rm --privileged multiarch/qemu-user-static --credential yes --persistent yes

    - name: Build hello-world application
      run: |
        cd ./hello-world
        docker build -t axisecp/hello-world:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/hello-world:aarch64 --build-arg ARCH=aarch64 .

    - name: Build hello-world-crosscompiled application
      run: |
        cd ./hello-world-crosscompiled
        docker build -t axisecp/hello-world-crosscompiled:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/hello-world-crosscompiled:aarch64 --build-arg ARCH=aarch64 .

    - name: Build minimal-ml-inference application
      run: |
        cd ./minimal-ml-inference
        docker build -t axisecp/minimal-ml-inference:armv7h7 --build-arg ARCH=armv7hf  .
        docker build -t axisecp/minimal-ml-inference:aarch64 --build-arg ARCH=aarch64  .

    - name: Build object-detector-cpp application
      run: |
        cd ./object-detector-cpp
        docker build -t axisecp/acap-object-detector-cpp:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/acap-object-detector-cpp:aarch64 --build-arg ARCH=aarch64 .

    - name: Build object-detector-python application
      run: |
        cd ./object-detector-python
        docker build -t axisecp/object-detector-python:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/object-detector-python:aarch64 --build-arg ARCH=aarch64 .

    - name: Build opencv-image-capture-cpp
      run: |
        cd ./opencv-image-capture-cpp
        docker build -t axisecp/acap-opencv-image-capture-cpp:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/acap-opencv-image-capture-cpp:aarch64 --build-arg ARCH=aarch64 .

    - name: Build opencv-qr-decoder-python application
      run: |
        cd ./opencv-qr-decoder-python
        docker build -t axisecp/acap-opencv-qr-decoder-python:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/acap-opencv-qr-decoder-python:aarch64 --build-arg ARCH=aarch64 .

    - name: Build parameter-api application
      run: |
        cd ./parameter-api
        docker build -t axisecp/parameter-api:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/parameter-api:aarch64 --build-arg ARCH=aarch64 .


    # ---- Examples where qemu is needed ----#

    - name: Build pose-estimator-with-flask application
      run: |
        cd ./pose-estimator-with-flask
        docker build -t axisecp/pose-estimator-with-flask:armv7h7 --build-arg ARCH=armv7hf  .
        docker build -t axisecp/pose-estimator-with-flask:aarch64 --build-arg ARCH=aarch64  .
        docker build -f Dockerfile.model -t axisecp/acap-dl-models:armv7h7 --build-arg ARCH=armv7hf .
        docker build -f Dockerfile.model -t axisecp/acap-dl-models:aarch64 --build-arg ARCH=aarch64 .

    # Run build web-server
    - name: Build web-server application
      run: |
        cd ./web-server
        docker build -t axisecp/web-server:armv7h7 --build-arg ARCH=armv7hf .
        docker build -t axisecp/web-server:aarch64 --build-arg ARCH=aarch64 .
